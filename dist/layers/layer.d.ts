import Matrix from "../matrix";
import { GPU } from "gpu.js";
import { IActivation } from "../activations/activations";
import Tensor from "../tensor";
import { SavedLayer } from "../model";
import { IOptimizer } from "../optimizers/Optimizers";
export default class Layer {
    weights: Matrix | Tensor[];
    bias: Matrix;
    errorWeights: Matrix | Tensor[];
    errorBias: Matrix;
    output_error: any;
    activation: Matrix | Tensor[];
    activationFunction: IActivation;
    useGpu: boolean;
    gpuInstance: GPU;
    shape: number[];
    prevLayerShape: number[];
    type: string;
    hasGPUSupport: boolean;
    isFirstLayer: boolean;
    optimizer: IOptimizer;
    learning_rate: number;
    ff_kernel: any;
    act_kernel: any;
    bp_error_kernel: any;
    bp_error_weight_kernel: any;
    getLayerInfo(): {
        type: string;
        shape: number[];
        activation: string;
    };
    buildLayer(prevLayerShape: number[]): void;
    feedForward(input: Layer | Matrix | Tensor[], isInTraining: boolean): void;
    buildFFKernels(batch_size: number): void;
    buildBPKernels(size: number): void;
    backPropagation(prev_layer: Layer, next_layer: Layer | Matrix | Tensor[]): void;
    toSavedModel(): SavedLayer;
    fromSavedModel(data: SavedLayer): void;
    updateLayer(): void;
}
